const fs = require('fs');
const path = require('path');
const { sendThreadNotification } = require('../utils/logs');

module.exports = {
  name: "thread",
  info: "Th√¥ng b√°o khi nh√≥m thay ƒë·ªïi ch·ªß ƒë·ªÅ, emoji, t√™n, admin ho·∫∑c ·∫£nh", 
  pro: "HNT",

  userCache: new Map(),
  lastApiCall: 0,
  API_COOLDOWN: 2000, 

  nameCache: {},
  nameCachePath: path.join(__dirname, '../database/json/usernames.json'),

  initNameCache: function() {
    try {
      if (fs.existsSync(this.nameCachePath)) {
        this.nameCache = JSON.parse(fs.readFileSync(this.nameCachePath));
      } else {
        if (!fs.existsSync(path.dirname(this.nameCachePath))) {
          fs.mkdirSync(path.dirname(this.nameCachePath), { recursive: true });
        }
        fs.writeFileSync(this.nameCachePath, JSON.stringify({}));
      }
    } catch (err) {
      console.error('Name cache init error:', err);
    }
  },

  saveName: function(userID, name) {
    try {
      this.nameCache[userID] = {
        name: name,
        timestamp: Date.now()
      };
      fs.writeFileSync(this.nameCachePath, JSON.stringify(this.nameCache, null, 2));
    } catch (err) {
      console.error('Name cache save error:', err);
    }
  },

  getUserInfo: async function(api, userID, threadID) {  
    if (!this.nameCache) this.initNameCache();

    if (this.nameCache[userID]) {
        const cached = this.nameCache[userID];
        if (Date.now() - cached.timestamp < 24 * 60 * 60 * 1000) {
            return {[userID]: {name: cached.name}};
        }
    }

    try {
        const info = await api.getUserInfo(userID);
        this.lastApiCall = Date.now();
        if (info[userID]?.name) {
            this.saveName(userID, info[userID].name);
            return info;
        }
    } catch (err) {
    
    }

    if (threadID) {  
        try {
            const threadInfo = await api.getThreadInfo(threadID);
            if (threadInfo?.userInfo) {
                const participant = threadInfo.userInfo.find(user => user.id === userID);
                if (participant?.name) {
                    this.saveName(userID, participant.name);
                    return {[userID]: {name: participant.name}};
                }
            }
        } catch (e) {
          
        }
    }

    if (this.nameCache[userID]) {
        return {[userID]: {name: this.nameCache[userID].name}};
    }

    const fallbackName = `Ng∆∞·ªùi d√πng Facebook (${userID})`;
    this.saveName(userID, fallbackName);
    return {[userID]: {name: fallbackName}};
},

  async tryChangeColor(api, color, threadID) {
    return new Promise((resolve, reject) => {
        api.changeThreadColor(color, threadID, (err) => {
            if (err) reject(err);
            else resolve();
        });
    });
  },

  onEvents: async function({ api, event, Threads }) {
    const { threadID, author, logMessageType, logMessageData } = event;

    if (event.type === "message") {
      const antispamPath = path.join(__dirname, '../commands/json/antispam.json');
      if (!fs.existsSync(antispamPath)) return;
      
      let antispamData = JSON.parse(fs.readFileSync(antispamPath));
      if (!antispamData.threads?.[threadID]) return;

      const now = Date.now();
      const SPAM_WINDOW = 2000;
      const SPAM_LIMIT = 5;
      
      if (!antispamData.spamData[threadID]) {
          antispamData.spamData[threadID] = {};
      }
      
      if (!antispamData.spamData[threadID][event.senderID]) {
          antispamData.spamData[threadID][event.senderID] = {
              messages: [{
                  timestamp: now
              }],
              warnings: 0
          };
      } else {

          antispamData.spamData[threadID][event.senderID].messages.push({
              timestamp: now
          });

          const recentMessages = antispamData.spamData[threadID][event.senderID].messages
              .filter(msg => now - msg.timestamp < SPAM_WINDOW);

          antispamData.spamData[threadID][event.senderID].messages = recentMessages;

          if (recentMessages.length >= SPAM_LIMIT) {
              try {
                  await api.removeUserFromGroup(event.senderID, threadID);
                  api.sendMessage(
                      `üö´ ƒê√£ kick ${event.senderName || "th√†nh vi√™n"} v√¨ spam!\n` +
                      `‚ö° L√Ω do: ${SPAM_LIMIT} tin nh·∫Øn trong ${SPAM_WINDOW/1000} gi√¢y`,
                      threadID
                  );
                  delete antispamData.spamData[threadID][event.senderID];
              } catch (error) {
                  console.error("Anti-spam kick error:", error);
                  api.sendMessage(
                      "‚ùå Kh√¥ng th·ªÉ kick th√†nh vi√™n spam. Bot c·∫ßn quy·ªÅn qu·∫£n tr·ªã vi√™n!",
                      threadID
                  );
              }
          }
      }

      fs.writeFileSync(antispamPath, JSON.stringify(antispamData, null, 4));
    }

    if (event.type === "message" && event.mentions) {
      const antitagPath = path.join(__dirname, '../commands/json/antitag.json');
      if (!fs.existsSync(antitagPath)) return;
      
      let antitagData = JSON.parse(fs.readFileSync(antitagPath));
      if (!antitagData.threads?.[threadID]) return;

      const mentionsKeys = Object.keys(event.mentions);
      const hasEveryoneMention = mentionsKeys.some(key => 
          event.mentions[key].toLowerCase().includes('m·ªçi ng∆∞·ªùi') || 
          event.mentions[key].toLowerCase().includes('everyone')
      );

      if (!hasEveryoneMention) return;

      const now = Date.now();
      const HOURS_24 = 24 * 60 * 60 * 1000;
      
      if (!antitagData.tagData[threadID]) {
          antitagData.tagData[threadID] = {};
      }
      
      if (!antitagData.tagData[threadID][event.senderID]) {
          antitagData.tagData[threadID][event.senderID] = {
              count: 0,
              lastReset: now,
              lastTagTime: 0,
              tagsInWindow: 0
          };
      }

      let userData = antitagData.tagData[threadID][event.senderID];
      
      if (now - userData.lastReset >= HOURS_24) {
          userData.count = 0;
          userData.lastReset = now;
          userData.tagsInWindow = 0;
      }

      if (now - userData.lastTagTime > 10000) {
          userData.tagsInWindow = 0;
      }


      userData.count++;
      userData.tagsInWindow++;
      userData.lastTagTime = now;

      if (userData.count === 2) {
          api.sendMessage(
              `‚ö†Ô∏è C·∫£nh b√°o ${event.senderName || "Th√†nh vi√™n"}: \n` +
              `B·∫°n ƒë√£ tag everyone/m·ªçi ng∆∞·ªùi ${userData.count}/3 l·∫ßn cho ph√©p trong 24h.\n` +
              `L·∫ßn cu·ªëi s·∫Ω b·ªã kick kh·ªèi nh√≥m!`,
              threadID
          );
      }
      
   
      if (userData.count >= 3 || userData.tagsInWindow >= 5) {
          try {
              await api.removeUserFromGroup(event.senderID, threadID);
              api.sendMessage(
                  `üö´ ƒê√£ kick ${event.senderName || "th√†nh vi√™n"} v√¨:\n` +
                  (userData.count >= 3 ? 
                      `üëâ Tag everyone/m·ªçi ng∆∞·ªùi qu√° 3 l·∫ßn trong 24h` : 
                      `üëâ Tag everyone/m·ªçi ng∆∞·ªùi spam ${userData.tagsInWindow} l·∫ßn trong 10 gi√¢y`),
                  threadID
              );
              delete antitagData.tagData[threadID][event.senderID];
          } catch (error) {
              console.error("Anti-tag kick error:", error);
              api.sendMessage(
                  "‚ùå Kh√¥ng th·ªÉ kick th√†nh vi√™n. Bot c·∫ßn quy·ªÅn qu·∫£n tr·ªã vi√™n!",
                  threadID
              );
          }
      }

      fs.writeFileSync(antitagPath, JSON.stringify(antitagData, null, 4));
    }

    if (logMessageType === "log:unsubscribe") {
      const antioutPath = path.join(__dirname, '../commands/json/antiout.json');
      if (!fs.existsSync(antioutPath)) return;
      
      const antioutData = JSON.parse(fs.readFileSync(antioutPath));
      if (!antioutData[threadID]) return;

      const leftParticipantFbId = event.logMessageData.leftParticipantFbId || 
                                 event.logMessageData.participantFbId;
      
      try {
          if (leftParticipantFbId == api.getCurrentUserID()) return;
          
          const isKicked = event.author !== leftParticipantFbId;
          if (isKicked) return;

          const userName = event.logMessageData.leftParticipantFbId_name || 
                          event.logMessageData.name ||
                          "Th√†nh vi√™n";
          
          await new Promise(resolve => setTimeout(resolve, 2000));

          let retryCount = 0;
          const maxRetries = 3;
          let success = false;
          
          while (retryCount < maxRetries && !success) {
              try {
                  // Use promisified version with proper error handling
                  await new Promise((resolve, reject) => {
                      api.addUserToGroup(leftParticipantFbId, threadID, (err) => {
                          if (err) {
                              if (typeof err === 'object') {
                                  reject(new Error(err.error || 'Unknown error'));
                              } else {
                                  reject(err);
                              }
                          } else {
                              resolve();
                          }
                      });
                  });
                  
                  success = true;
                  await api.sendMessage(
                      `üîí ƒê√£ th√™m ${userName} tr·ªü l·∫°i nh√≥m!\n‚ö†Ô∏è Nh√≥m ƒëang b·∫≠t ch·∫ø ƒë·ªô ch·ªëng r·ªùi nh√≥m.`,
                      threadID
                  );
              } catch (addError) {
                  retryCount++;
                  if (retryCount < maxRetries) {
                      await new Promise(resolve => setTimeout(resolve, 2000 * retryCount));
                      continue;
                  }
                  throw addError;
              }
          }
      } catch (error) {
          console.error("Anti-out error:", error);
          let errorMsg = "‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m l·∫°i th√†nh vi√™n v√†o nh√≥m. ";
          
          if (error.message?.includes('not found')) {
              errorMsg += "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.";
          } else if (error.message?.includes('blocked')) {
              errorMsg += "Ng∆∞·ªùi d√πng ƒë√£ ch·∫∑n bot.";
          } else if (error.message?.includes('limit')) {
              errorMsg += "Bot ƒëang b·ªã Facebook h·∫°n ch·∫ø t√≠nh nƒÉng.";
          } else {
              errorMsg += "C√≥ th·ªÉ bot kh√¥ng ph·∫£i l√† qu·∫£n tr·ªã vi√™n.";
          }

          api.sendMessage(errorMsg, threadID);
      }
      return;
    }

    if (logMessageType === "log:subscribe") {
      const antimemPath = path.join(__dirname, '../commands/json/antijoin.json');
      if (!fs.existsSync(antimemPath)) return;
      
      const antimemData = JSON.parse(fs.readFileSync(antimemPath));
      if (!antimemData[threadID]) return;

      const addedParticipants = event.logMessageData.addedParticipants;
      if (!addedParticipants || !addedParticipants.length) return;

      try {
          const authorInfo = await this.getUserInfo(api, author, threadID);
          const authorName = authorInfo[author]?.name || "Ng∆∞·ªùi d√πng Facebook";

          for (const user of addedParticipants) {
              if (user.userFbId === api.getCurrentUserID()) continue;
              
              await api.removeUserFromGroup(user.userFbId, threadID);
          }

          api.sendMessage(
              `‚ö†Ô∏è ${authorName} ƒë√£ c·ªë g·∫Øng th√™m th√†nh vi√™n m·ªõi!\n` +
              `üö´ ƒê√£ kick c√°c th√†nh vi√™n m·ªõi do nh√≥m ƒëang b·∫≠t ch·∫ø ƒë·ªô ch·ªëng th√™m th√†nh vi√™n.`,
              threadID
          );
      } catch (error) {
          console.error("Anti-member error:", error);
          api.sendMessage(
              "‚ùå Kh√¥ng th·ªÉ kick th√†nh vi√™n m·ªõi. C√≥ th·ªÉ bot kh√¥ng ph·∫£i l√† qu·∫£n tr·ªã vi√™n.",
              threadID
          );
      }
      return;
    }

    const getAuthorName = async () => {
        try {
            const info = await this.getUserInfo(api, author, threadID);
            return info[author]?.name || `Ng∆∞·ªùi d√πng Facebook (${author})`;
        } catch (error) {
            return `Ng∆∞·ªùi d√πng Facebook (${author})`;
        }
    };

    if (logMessageType === "log:thread-image") {
        try {
            const authorName = await getAuthorName();
            const msg = `üë• THAY ƒê·ªîI ·∫¢NH NH√ìM\n` +
                       `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
                       `üë§ Ng∆∞·ªùi thay ƒë·ªïi: ${authorName}\n` +
                       `‚è∞ Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}`;
            
            await sendThreadNotification(api, threadID, msg, 'avatar');
        } catch (error) {
           
            console.error('Thread Image Update Error:', error.message);
        }
    }

    if (logMessageType === "log:thread-admins") {
      try {
        const antirolePath = path.join(__dirname, '../commands/json/antirole.json');
        if (fs.existsSync(antirolePath)) {
          const antiroleData = JSON.parse(fs.readFileSync(antirolePath));
          
          if (antiroleData.threads?.[threadID]) {
            const adminConfig = JSON.parse(fs.readFileSync('./admin.json', 'utf8'));
            const isAdminBot = adminConfig.adminUIDs.includes(author);
            const isBotAction = author === api.getCurrentUserID();

            if (isBotAction) return;

            if (!isAdminBot) {
              const targetID = logMessageData.TARGET_ID;
              const isAddAdmin = logMessageData.ADMIN_EVENT === "add_admin";
              
              setTimeout(async () => {
                try {
                  antiroleData.lastBotAction = {
                    threadID,
                    targetID,
                    timestamp: Date.now()
                  };
                  fs.writeFileSync(antirolePath, JSON.stringify(antiroleData, null, 4));

                  if (isAddAdmin) {
                    await api.changeAdminStatus(threadID, targetID, false);
                  } else {
                    await api.changeAdminStatus(threadID, targetID, true);
                  }

                  const authorInfo = await this.getUserInfo(api, author, threadID);
                  const authorName = authorInfo[author]?.name || "Ng∆∞·ªùi d√πng Facebook";
                  const targetInfo = await this.getUserInfo(api, targetID, threadID);
                  const targetName = targetInfo[targetID]?.name || "Ng∆∞·ªùi d√πng Facebook";

                  api.sendMessage(
                    `‚ö†Ô∏è ${authorName} ƒë√£ c·ªë g·∫Øng ${isAddAdmin ? "th√™m" : "g·ª°"} qu·∫£n tr·ªã vi√™n!\n` +
                    `üîÑ ƒê√£ ho√†n t√°c quy·ªÅn qu·∫£n tr·ªã c·ªßa ${targetName}\n` +
                    `üí° Ch·ªâ admin bot m·ªõi c√≥ th·ªÉ thay ƒë·ªïi quy·ªÅn qu·∫£n tr·ªã.`,
                    threadID
                  );
                } catch (error) {
                  console.error("Role restore error:", error);
                  api.sendMessage(
                    "‚ùå Kh√¥ng th·ªÉ ho√†n t√°c thay ƒë·ªïi quy·ªÅn qu·∫£n tr·ªã. Bot c·∫ßn l√† qu·∫£n tr·ªã vi√™n!",
                    threadID
                  );
                }
              }, 1000);

              return;
            }
          }
        }

        const authorName = await getAuthorName();
        const targetID = logMessageData.TARGET_ID;
   
        const targetInfo = await this.getUserInfo(api, targetID, threadID);
        const targetName = targetInfo[targetID]?.name || "Ng∆∞·ªùi d√πng Facebook";
        
        let msg = `üë• THAY ƒê·ªîI QU·∫¢N TR·ªä VI√äN\n` +
                 `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
                 `üë§ Ng∆∞·ªùi th·ª±c hi·ªán: ${authorName}\n` +
                 `üéØ ƒê·ªëi t∆∞·ª£ng: ${targetName}\n` +
                 `üìù H√†nh ƒë·ªông: ${logMessageData.ADMIN_EVENT === "add_admin" ? "Th√™m Admin" : "G·ª° Admin"}\n` +
                 `‚è∞ Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}`;
                 
        await sendThreadNotification(api, threadID, msg, 'admin');
      } catch (error) {
        console.error('Admin Update Error:', error);
        api.sendMessage("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng", threadID);
      }
    }

    if (logMessageType === "log:user-nickname") {
      try {
        const authorName = await getAuthorName();
        const changedFor = logMessageData.participant_id;
        const oldNickname = logMessageData.previous_nickname || "T√™n m·∫∑c ƒë·ªãnh";
        const newNickname = logMessageData.new_nickname || "T√™n m·∫∑c ƒë·ªãnh";
        
        let msg = `üë• THAY ƒê·ªîI BI·ªÜT DANH\n` +
                 `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
                 `üë§ Ng∆∞·ªùi thay ƒë·ªïi: ${authorName}\n` +
                 `üéØ ƒê·ªëi t∆∞·ª£ng: ${await getAuthorName(changedFor)}\n` +
                 `üìù T√™n c≈©: ${oldNickname}\n` +
                 `üìù T√™n m·ªõi: ${newNickname}\n` +
                 `‚è∞ Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}`;

        await sendThreadNotification(api, threadID, msg, 'nick');
      } catch (error) {
        console.error('Nickname Update Error:', error);
      }
    }

    if (logMessageType === "log:thread-color" || logMessageType === "log:thread-icon") {
      try {
        const authorName = await getAuthorName();
        
        if (logMessageType === "log:thread-color") {
          const oldColor = logMessageData.old_color || "M·∫∑c ƒë·ªãnh";
          const newColor = logMessageData.new_color || "M·∫∑c ƒë·ªãnh";
          
          let msg = `üë• THAY ƒê·ªîI CH·ª¶ ƒê·ªÄ NH√ìM\n` +
                    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
                    `üë§ Ng∆∞·ªùi thay ƒë·ªïi: ${authorName}\n` +
                    `üé® M√†u c≈©: ${oldColor}\n` +
                    `üé® M√†u m·ªõi: ${newColor}\n` +
                    `‚è∞ Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}`;
          
          await sendThreadNotification(api, threadID, msg, 'color');
        } else if (logMessageType === "log:thread-icon") {
          const oldEmoji = logMessageData.old_emoji || "‚ö™";
          const newEmoji = logMessageData.new_emoji || "‚ö™";
          
          let msg = `üë• THAY ƒê·ªîI EMOJI NH√ìM\n` +
                    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
                    `üë§ Ng∆∞·ªùi thay ƒë·ªïi: ${authorName}\n` +
                    `üòÄ Emoji c≈©: ${oldEmoji}\n` +
                    `üòÄ Emoji m·ªõi: ${newEmoji}\n` +
                    `‚è∞ Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}`;
          
          api.sendMessage(msg, threadID);
        }
        
      } catch (error) {
        console.error('Thread Update Event Error:', error);
        api.sendMessage("‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω thay ƒë·ªïi nh√≥m", threadID);
      }
    }

    if (logMessageType === "log:user-nickname") {
      const antinickPath = path.join(__dirname, '../commands/json/antinc.json');
      if (!fs.existsSync(antinickPath)) return;
      
      const antinickData = JSON.parse(fs.readFileSync(antinickPath));
      if (!antinickData.threads?.[threadID]?.enable) return;

      try {
          const adminConfig = JSON.parse(fs.readFileSync('./admin.json', 'utf8'));
          const isAdminBot = adminConfig.adminUIDs.includes(author);
          const threadInfo = await api.getThreadInfo(threadID);
          const isGroupAdmin = threadInfo.adminIDs.some(e => e.id == author);
          const isBotAction = author === api.getCurrentUserID();

          if (isBotAction || isAdminBot || isGroupAdmin) return;

          const changedFor = logMessageData.participant_id;
          const oldNickname = logMessageData.previous_nickname || "";
          
          await api.changeNickname(
              oldNickname,              threadID,              changedFor
          );

          const authorInfo = await this.getUserInfo(api, author, threadID);
          const authorName = authorInfo[author]?.name || "Ng∆∞·ªùi d√πng Facebook";

          api.sendMessage(
              `‚ö†Ô∏è ${authorName} ƒë√£ c·ªë g·∫Øng ƒë·ªïi bi·ªát danh!\n` +
              `üí° Ch·ªâ admin bot v√† qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ ƒë·ªïi bi·ªát danh.`,
              threadID
          );

      } catch (error) {
          console.error("Anti-nickname error:", error);
          api.sendMessage(
              "‚ùå Kh√¥ng th·ªÉ ho√†n t√°c bi·ªát danh. Bot c·∫ßn l√† qu·∫£n tr·ªã vi√™n!",
              threadID
          );
      }
    }
  }
};