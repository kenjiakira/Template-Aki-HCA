const fs = require('fs');
const adminConfigPath = "./admin.json";
const usersPath = "./database/users.json";
const threadsPath = "./database/threads.json";
const chalk = require('chalk');
const gradient = require('gradient-string');
const moment = require("moment-timezone");
const os = require('os'); 

let io = null;

const initializeSocket = (socketIO) => {
    io = socketIO;
};

const time = moment.tz("Asia/Ho_Chi_Minh").format("LLLL");
let adminConfig = { adminUIDs: [], notilogs: true };
let usersData = {};
let threadsData = {};

const gradientText = (text) => gradient('cyan', 'pink')(text);
const boldText = (text) => chalk.bold(text);

try {
    adminConfig = JSON.parse(fs.readFileSync(adminConfigPath, "utf8"));
    usersData = JSON.parse(fs.readFileSync(usersPath, "utf8"));
    threadsData = JSON.parse(fs.readFileSync(threadsPath, "utf8"));
} catch (err) {
    console.error(err);
}

const loadConfig = () => {
    try {
        const settingsPath = './database/threadSettings.json';
        if (fs.existsSync(settingsPath)) {
            return JSON.parse(fs.readFileSync(settingsPath));
        }
        return {};
    } catch (error) {
        return {};
    }
};

const notifyAdmins = async (api, threadID, action, senderID) => {
    if (adminConfig.notilogs) {  
        const groupName = await getGroupName(api, threadID);
        const addedOrKickedBy = await getUserName(api, senderID);

        const notificationMessage = `üîî ùóßùóµùóºÃÇùóªùó¥ ùóØùóÆÃÅùóº ùóóùòÇÃõÃÉ ùóüùó∂ùó≤Ã£ÃÇùòÇ ùóïùóºùòÅ\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüìù Bot ƒë√£ ${action} kh·ªèi nh√≥m ${groupName}\nüÜî ID nh√≥m: ${threadID}\nüïú Th·ªùi gian: ${time}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

        if (io) {
            io.emit('botLog', {
                output: notificationMessage,
                type: 'notification',
                color: '#ff416c'
            });
        }

        if (Array.isArray(adminConfig.adminUIDs) && adminConfig.adminUIDs.length > 0) {
            for (const adminID of adminConfig.adminUIDs) {
                
            }
        } else {
            console.error("ID qu·∫£n tr·ªã vi√™n kh√¥ng ƒë∆∞·ª£c x√°c ƒë·ªãnh ho·∫∑c kh√¥ng ph·∫£i l√† m·ªôt m·∫£ng.");
        }
    } else {
        console.log(`${boldText(gradientText(`TH√îNG B√ÅO C·ª¶A QU·∫¢N TR·ªä VI√äN: NH·∫¨T K√ù TH√îNG B√ÅO B·ªä T·∫ÆT`))}`);
    }
};

const sendThreadNotification = async (api, threadID, message, type) => {
    const settings = loadConfig();
    const threadSettings = settings[threadID] || {};
    
    if (threadSettings[`notify_${type}`] !== false) {
        await api.sendMessage(message, threadID);
    }
};

const getMemoryUsage = () => {
    const totalMem = os.totalmem();
    const freeMem = os.freemem();
    const usedMem = totalMem - freeMem;
    
    const toGB = (bytes) => (bytes / 1024 / 1024 / 1024).toFixed(2);
    return {
        used: toGB(usedMem),
        total: toGB(totalMem),
        percentage: ((usedMem / totalMem) * 100).toFixed(1)
    };
};

const logChatRecord = async (api, event) => {
    const threadID = event.threadID;
    const senderID = event.senderID;
    const userName = await getUserName(api, senderID);
    const groupName = await getGroupName(api, threadID);
    
    let isAdmin = false;
    if (threadsData[threadID]?.adminIDs) {
        isAdmin = threadsData[threadID].adminIDs.some(admin => admin.id === senderID);
    }

    const logHeader = gradientText("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ[ CHU·ªñI CSDL NH·∫¨T K√ù BOT ]‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");

    if (event.body) {
        const memory = getMemoryUsage();
        const logMessage = [
            logHeader,
            "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì",
            `‚î£‚û§ üåê Nh√≥m: ${groupName}`,
            `‚î£‚û§ üÜî ID nh√≥m: ${threadID}`,
            `‚î£‚û§ üë§ ID Ng∆∞·ªùi d√πng: ${senderID}${isAdmin ? ' (Admin)' : ''}`,
            `‚î£‚û§ ‚úâÔ∏è N·ªôi dung: ${event.body}`,
            `‚î£‚û§ ‚è∞ V√†o l√∫c: ${time}`,
            `‚î£‚û§ üíª RAM: ${memory.used}GB/${memory.total}GB (${memory.percentage}%)`,
            "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ"
        ].join('\n');

        console.log(logMessage);
        
            "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ"
        if (io) {
            io.emit('botLog', { 
                output: logMessage,
                type: 'chat',
                color: '#00f2fe'
            });
        }
    } else if (event.attachments || event.stickers) {
        const logMessage = [
            logHeader,
            "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì",
            `‚î£‚û§ üåê Nh√≥m: ${groupName}`,
            `‚î£‚û§ üÜî ID nh√≥m: ${threadID}`,
            `‚î£‚û§ üë§ ID Ng∆∞·ªùi d√πng: ${senderID}`,
            `‚î£‚û§ üñºÔ∏è N·ªôi dung: ${userName} g·ª≠i m·ªôt nh√£n d√°n üü¢`,
            `‚î£‚û§ ‚è∞ V√†o l√∫c: ${time}`,
            "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ"
        ].join('\n');

        console.log(logMessage);
        
        if (io) {
            io.emit('commandOutput', { 
                output: logMessage,
                color: '#00f2fe'
            });
        }
    }
};

const handleBotAddition = async (api, threadID, senderID) => {
    const userName = await getUserName(api, senderID);
    const groupName = await getGroupName(api, threadID);
    console.log(`Bot ƒë√£ ƒë∆∞·ª£c th√™m v√†o nh√≥m.\nt√™n nh√≥m: ${groupName}\nThreadID: ${threadID}\nTh√™m b·ªüi: ${userName}`);
};

const handleBotRemoval = async (api, threadID, senderID) => {
    const userName = await getUserName(api, senderID);
    const groupName = await getGroupName(api, threadID);
    console.log(`Bot ƒë√£ b·ªã x√≥a kh·ªèi nh√≥m.\nt√™n nh√≥m: ${groupName}\nThreadID: ${threadID}\nb·ªã x√≥a b·ªüi: ${userName}`);
    await removeFromDatabase(threadID, senderID);
};

const removeFromDatabase = (threadID, senderID) => {
    let removed = false;
    if (usersData[senderID]) {
        delete usersData[senderID];
        fs.writeFileSync(usersPath, JSON.stringify(usersData, null, 2));
        console.log(`[DATABASE] x√≥a senderID: ${senderID}`);
        removed = true;
    }
    if (threadsData[threadID]) {
        delete threadsData[threadID];
        fs.writeFileSync(threadsPath, JSON.stringify(threadsData, null, 2));
        console.log(`[DATABASE] x√≥a threadID: ${threadID}`);
        removed = true;
    }
    return removed;
};

const getGroupName = async (api, threadID) => {
    try {
        const threadInfo = await api.getThreadInfo(threadID);
        if (!threadInfo) return `Nh√≥m ${threadID}`;
        return threadInfo.name || `Nh√≥m ${threadID}`;
    } catch (error) {

        if (!error.errorSummary?.includes('B·∫°n t·∫°m th·ªùi b·ªã ch·∫∑n')) {
            console.error(`L·ªói khi l·∫•y t√™n nh√≥m ${threadID}:`, error);
        }
        return `Nh√≥m ${threadID}`;
    }
};

const getUserName = async (api, userID) => {
    try {
        const userInfo = await api.getUserInfo(userID);
        if (!userInfo || !userInfo[userID]) return `Ng∆∞·ªùi d√πng ${userID}`;        return userInfo[userID].name || `Ng∆∞·ªùi d√πng ${userID}`;    } catch (error) {

        if (!error.errorSummary?.includes('B·∫°n t·∫°m th·ªùi b·ªã ch·∫∑n')) {
            console.error(`L·ªói khi l·∫•y t√™n ng∆∞·ªùi d√πng ${userID}:`, error);
        }
        return `Ng∆∞·ªùi d√πng ${userID}`;
    }
};

module.exports = { 
    logChatRecord, 
    notifyAdmins, 
    handleBotAddition,     
    handleBotRemoval,
    initializeSocket,
    sendThreadNotification
};