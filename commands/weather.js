const axios = require('axios');
const translate = require('translate-google');

const OPENWEATHER_API_KEY = "1230a8fdc6457603234c68ead5f3f967";
const OPENWEATHER_URL = "https://api.openweathermap.org/data/2.5/weather";

const ACCUWEATHER_API_KEY = "0Ux14sE88TUCC0vALojkwlWP47fjmIdK";
const ACCUWEATHER_URL = "http://dataservice.accuweather.com/currentconditions/v1/";

async function getWeatherFromOpenWeather(cityName) {
  const params = {
    q: cityName,
    appid: OPENWEATHER_API_KEY,
    units: "metric"
  };

  try {
    const response = await axios.get(OPENWEATHER_URL, { params });
    return response.data;
  } catch (error) {
    console.error(`L·ªói khi g·ªçi OpenWeather API: ${error.response ? error.response.data.message : error.message}`);
    throw new Error("Kh√¥ng t√¨m th·∫•y th√¥ng tin th·ªùi ti·∫øt t·ª´ OpenWeatherMap.");
  }
}

async function getWeatherFromAccuWeather(cityKey) {
  try {
    const response = await axios.get(`${ACCUWEATHER_URL}${cityKey}?apikey=${ACCUWEATHER_API_KEY}`);
    return response.data[0];
  } catch (error) {
    console.error(`L·ªói khi g·ªçi AccuWeather API: ${error.response ? error.response.data.message : error.message}`);
    throw new Error("Kh√¥ng t√¨m th·∫•y th√¥ng tin th·ªùi ti·∫øt t·ª´ AccuWeather.");
  }
}

async function getCityKey(cityName) {
  try {
    const response = await axios.get(`http://dataservice.accuweather.com/locations/v1/cities/search?apikey=${ACCUWEATHER_API_KEY}&q=${encodeURIComponent(cityName)}`);
    if (response.data.length > 0) {
      return response.data[0].Key;
    } else {
      throw new Error("Kh√¥ng t√¨m th·∫•y m√£ th√†nh ph·ªë trong AccuWeather.");
    }
  } catch (error) {
    console.error(`L·ªói khi t√¨m m√£ th√†nh ph·ªë t·ª´ AccuWeather: ${error.response ? error.response.data.message : error.message}`);
    throw new Error("Kh√¥ng th·ªÉ t√¨m m√£ th√†nh ph·ªë t·ª´ AccuWeather.");
  }
}

module.exports = {
  name: "weather",
  dev: "Akira, HNT",
  info: "Tra c·ª©u th√¥ng tin th·ªùi ti·∫øt",
  onPrefix: true,
  dmUser: false,
  usages: "weather [t√™n th√†nh ph·ªë]",
  cooldowns: 5,

  onLaunch: async function({ api, event, target }) {
    const cityName = target.join(" ");
    if (!cityName) {
      return api.sendMessage("üåç B·∫°n ch∆∞a nh·∫≠p t√™n th√†nh ph·ªë/khu v·ª±c c·∫ßn tra c·ª©u th·ªùi ti·∫øt.", event.threadID);
    }

    try {
      let translatedCityName = cityName;
      if (!/^[a-zA-Z\s]+$/.test(cityName)) { 
        try {
          translatedCityName = await translate(cityName, { to: "en" });
          if (typeof translatedCityName === 'object' && translatedCityName.text) {
            translatedCityName = translatedCityName.text;
          }
        } catch (error) {
          return api.sendMessage("C√≥ l·ªói x·∫£y ra khi d·ªãch t√™n th√†nh ph·ªë. Vui l√≤ng ki·ªÉm tra l·∫°i.", event.threadID);
        }
      }

      let weatherData;
      try {
        weatherData = await getWeatherFromOpenWeather(translatedCityName);
      } catch (error) {
        console.warn("Kh√¥ng t√¨m th·∫•y th√†nh ph·ªë t·ª´ OpenWeatherMap, ƒëang th·ª≠ AccuWeather...");

        let cityKey;
        try {
          cityKey = await getCityKey(translatedCityName);
          weatherData = await getWeatherFromAccuWeather(cityKey);
        } catch (accuWeatherError) {
          console.error("Kh√¥ng t√¨m th·∫•y th√†nh ph·ªë t·ª´ AccuWeather:", accuWeatherError);
          throw new Error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt t·ª´ c·∫£ OpenWeatherMap v√† AccuWeather.");
        }
      }

      if (!weatherData || (!weatherData.weather && !weatherData.main)) {
        return api.sendMessage("‚ùó Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau.", event.threadID);
      }

      const weatherDescription = `
        Th·ªùi ti·∫øt t·∫°i ${weatherData.name} hi·ªán t·∫°i:
        - M√¥ t·∫£: ${weatherData.weather[0]?.description || "Kh√¥ng c√≥ m√¥ t·∫£"}
        - Nhi·ªát ƒë·ªô: ${weatherData.main?.temp || "Kh√¥ng c√≥ th√¥ng tin"}¬∞C
        - ƒê·ªô ·∫©m: ${weatherData.main?.humidity || "Kh√¥ng c√≥ th√¥ng tin"}%
        - T·ªëc ƒë·ªô gi√≥: ${weatherData.wind?.speed || "Kh√¥ng c√≥ th√¥ng tin"} m/s
      `;

      api.sendMessage(weatherDescription, event.threadID);
    } catch (error) {
      api.sendMessage("‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin th·ªùi ti·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau.", event.threadID);
    }
  },

  onLoad: function({ api }) {
    const now = new Date();
    const vietnamTimezoneOffset = 7 * 60 * 60 * 1000;
    const localTime = new Date(now.getTime() + vietnamTimezoneOffset);
    
    const minutesUntilNextHour = 60 - localTime.getMinutes();
    const msUntilNextHour = (minutesUntilNextHour * 360 + (360 - localTime.getSeconds())) * 1000; 

    console.log(`ƒêang ch·ªù ${msUntilNextHour} ms ƒë·ªÉ th√¥ng b√°o v√†o gi·ªù ti·∫øp theo.`);

    setTimeout(() => {
        console.log('G·ª≠i th√¥ng b√°o th·ªùi ti·∫øt ƒë·∫ßu ti√™n.');
        notifyWeather(api); 
        setInterval(() => {
            console.log('G·ª≠i th√¥ng b√°o th·ªùi ti·∫øt m·ªói gi·ªù.');
            notifyWeather(api); 
        }, 360 * 60 * 1000);
    }, msUntilNextHour);
  }
};
