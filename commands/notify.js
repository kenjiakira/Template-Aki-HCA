const fs = require('fs');
const path = require('path');
const threadSettingsPath = path.join(__dirname, '../database/threadSettings.json');
const rankConfigPath = path.join(__dirname, '../database/json/rankConfig.json');

function loadConfig(filePath, defaultValue = {}) {
    if (!fs.existsSync(filePath)) {
        fs.writeFileSync(filePath, JSON.stringify(defaultValue, null, 2));
        return defaultValue;
    }
    return JSON.parse(fs.readFileSync(filePath, 'utf8'));
}

module.exports = {
    name: "notify",
    dev: "HNT",
    usedby: 1, 
    info: "Qu·∫£n l√Ω c√†i ƒë·∫∑t th√¥ng b√°o nh√≥m",
    onPrefix: true,
    usages: "notify [lo·∫°i] [t√πy ch·ªçn]",
    cooldowns: 5,

    onLaunch: async ({ api, event, target, prefix }) => {
        const { threadID, senderID } = event;
        
        const features = {
            sub: { 
                name: 'sub', 
                icon: 'üëã', 
                desc: 'th√¥ng b√°o ch√†o/t·∫°m bi·ªát', 
                detail: 't·ª± ƒë·ªông g·ª≠i tin nh·∫Øn khi c√≥ th√†nh vi√™n v√†o/r·ªùi',
                usage: 'notify sub on/off' 
            },
            admin: {
                name: 'admin',
                icon: 'üëë',
                desc: 'th√¥ng b√°o thay ƒë·ªïi qu·∫£n tr·ªã vi√™n',
                detail: 'th√¥ng b√°o khi c√≥ thay ƒë·ªïi v·ªÅ qu·∫£n tr·ªã vi√™n nh√≥m',
                usage: 'notify admin on/off'
            },
            avatar: {
                name: 'avatar',
                icon: 'üñºÔ∏è',
                desc: 'th√¥ng b√°o ƒë·ªïi ·∫£nh nh√≥m',
                detail: 'th√¥ng b√°o khi c√≥ ng∆∞·ªùi thay ƒë·ªïi ·∫£nh nh√≥m',
                usage: 'notify avatar on/off'
            },
            name: {
                name: 'name',
                icon: '‚úèÔ∏è',
                desc: 'th√¥ng b√°o ƒë·ªïi t√™n nh√≥m',
                detail: 'th√¥ng b√°o khi c√≥ ng∆∞·ªùi thay ƒë·ªïi t√™n nh√≥m',
                usage: 'notify name on/off'
            },
            nick: {
                name: 'nick',
                icon: 'üìù',
                desc: 'th√¥ng b√°o ƒë·ªïi bi·ªát danh',
                detail: 'th√¥ng b√°o khi c√≥ ng∆∞·ªùi thay ƒë·ªïi bi·ªát danh',
                usage: 'notify nick on/off'
            }
        };

        if (!target[0]) {
            let msg = "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n";
            msg += "    üì¢ NOTIFY SYSTEM üì¢    \n";
            msg += "‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n";

            const settings = loadConfig(threadSettingsPath);
            const rankConfig = loadConfig(rankConfigPath, { disabledThreads: [] });

            const subStatus = settings[threadID]?.notifications ?? true;
            const rankStatus = !rankConfig.disabledThreads.includes(threadID);
            const welcomeMsg = settings[threadID]?.welcomeMessage ? "‚úÖ" : "‚ùå";
            const leaveMsg = settings[threadID]?.leaveMessage ? "‚úÖ" : "‚ùå";

            for (const [key, value] of Object.entries(features)) {
                let status = "‚îÄ‚îÄ";
                if (key === 'sub') status = subStatus ? "ON ‚úÖ" : "OFF ‚ùå";
                else if (key === 'config') status = `Welcome: ${welcomeMsg} | Leave: ${leaveMsg}`;
                else if (key === 'rank') status = rankStatus ? "ON ‚úÖ" : "OFF ‚ùå";
                else if (key === 'admin' || key === 'avatar' || key === 'name' || key === 'nick') status = settings[threadID][`notify_${key}`] !== false ? "ON ‚úÖ" : "OFF ‚ùå";

                msg += `${value.icon} ${key.toUpperCase()}: ${value.desc}\n`;
                msg += `‚Ü¨ Chi ti·∫øt: ${value.detail}\n`;
                msg += `‚Ü¨ C√°ch d√πng: ${value.usage}\n`;
                msg += `‚Ü¨ Tr·∫°ng th√°i: ${status}\n`;
                msg += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
            }

            msg += "\nüí° Bi·∫øn c√≥ s·∫µn cho tin nh·∫Øn:\n";
            msg += "‚å≤ {userName} - T√™n th√†nh vi√™n\n";
            msg += "‚å≤ {threadName} - T√™n nh√≥m\n";
            msg += "‚å≤ {memberNumber} - S·ªë th·ª© t·ª± th√†nh vi√™n\n";
            msg += "‚å≤ {memberCount} - T·ªïng s·ªë th√†nh vi√™n\n";
            msg += "‚å≤ {actionType} - H√†nh ƒë·ªông (r·ªùi/b·ªã kick)\n";
            
            return api.sendMessage(msg, threadID);
        }

        try {
            const type = target[0].toLowerCase();
            const action = target[1]?.toLowerCase();

            if (type === 'all' || type.includes(' ')) {
                const featureList = type === 'all' ? 
                    ['sub', 'admin', 'avatar', 'name', 'nick'] : 
                    type.split(' ').filter(f => features[f]);

                if (!action || !['on', 'off'].includes(action)) {
                    return api.sendMessage("‚ö†Ô∏è Vui l√≤ng s·ª≠ d·ª•ng: notify all on/off ho·∫∑c notify feature1 feature2 on/off", threadID);
                }

                let settings = loadConfig(threadSettingsPath);
                if (!settings[threadID]) settings[threadID] = {};

                let updatedFeatures = [];
                for (const feature of featureList) {
                    if (feature === 'sub') {
                        settings[threadID].notifications = (action === 'on');
                    } else if (['admin', 'avatar', 'name', 'nick'].includes(feature)) {
                        settings[threadID][`notify_${feature}`] = (action === 'on');
                    }
                    updatedFeatures.push(features[feature].desc);
                }

                fs.writeFileSync(threadSettingsPath, JSON.stringify(settings, null, 2));
                return api.sendMessage(
                    `‚úÖ ƒê√£ ${action === 'on' ? 'b·∫≠t' : 't·∫Øt'} c√°c th√¥ng b√°o:\n${updatedFeatures.map(desc => `‚Ä¢ ${desc}`).join('\n')}`,
                    threadID
                );
            }

            if (type === 'config') {
                if (!action || !target[2]) {
                    return api.sendMessage("‚ö†Ô∏è Vui l√≤ng s·ª≠ d·ª•ng: notify config [welcome/leave] [n·ªôi dung]", threadID);
                }

                if (!['welcome', 'leave'].includes(action)) {
                    return api.sendMessage("‚ö†Ô∏è Ch·ªâ h·ªó tr·ª£ c·∫•u h√¨nh welcome ho·∫∑c leave!", threadID);
                }

                let settings = loadConfig(threadSettingsPath);
                if (!settings[threadID]) settings[threadID] = {};
                
                const message = target.slice(2).join(" ");
                settings[threadID][`${action}Message`] = message;
                fs.writeFileSync(threadSettingsPath, JSON.stringify(settings, null, 2));
                
                return api.sendMessage(
                    `‚úÖ ƒê√£ c·∫≠p nh·∫≠t tin nh·∫Øn ${action === 'welcome' ? 'ch√†o m·ª´ng' : 't·∫°m bi·ªát'}!\n` +
                    `üìù N·ªôi dung: ${message}`,
                    threadID
                );
            }

            if (type === 'sub') {
                let settings = loadConfig(threadSettingsPath);
                if (!settings[threadID]) {
                    settings[threadID] = {
                        notifications: true,
                        welcomeMessage: "üéâ Xin ch√†o {userName}!\nCh√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi nh√≥m \"{threadName}\"!\nB·∫°n l√† th√†nh vi√™n th·ª© {memberNumber}",
                        leaveMessage: "üëã {userName} {actionType}.\nüë• Th√†nh vi√™n c√≤n l·∫°i: {memberCount}"
                    };
                }

                if (action === 'on' || action === 'off') {
                    settings[threadID].notifications = (action === 'on');
                    fs.writeFileSync(threadSettingsPath, JSON.stringify(settings, null, 2));
                    return api.sendMessage(`‚úÖ ƒê√£ ${action === 'on' ? 'b·∫≠t' : 't·∫Øt'} th√¥ng b√°o ch√†o/t·∫°m bi·ªát!`, threadID);
                }
            }
            else if (type === 'welcome' || type === 'leave') {
                let settings = loadConfig(threadSettingsPath);
                if (!settings[threadID]) settings[threadID] = {};
                
                const message = target.slice(1).join(" ");
                if (!message) return api.sendMessage("‚ö†Ô∏è Vui l√≤ng nh·∫≠p n·ªôi dung tin nh·∫Øn!", threadID);
                
                settings[threadID][`${type}Message`] = message;
                fs.writeFileSync(threadSettingsPath, JSON.stringify(settings, null, 2));
                return api.sendMessage(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t tin nh·∫Øn ${type === 'welcome' ? 'ch√†o m·ª´ng' : 't·∫°m bi·ªát'}!`, threadID);
            }
            else if (type === 'rank') {
                let rankConfig = loadConfig(rankConfigPath, { disabledThreads: [] });
                
                if (!action || !['on', 'off'].includes(action)) {
                    const status = rankConfig.disabledThreads.includes(threadID) ? 'T·∫ÆT' : 'B·∫¨T';
                    return api.sendMessage(`Th√¥ng b√°o rankup ƒëang ${status} trong nh√≥m n√†y`, threadID);
                }

                if (action === 'off') {
                    if (!rankConfig.disabledThreads.includes(threadID)) {
                        rankConfig.disabledThreads.push(threadID);
                    }
                } else {
                    rankConfig.disabledThreads = rankConfig.disabledThreads.filter(id => id !== threadID);
                }
                
                fs.writeFileSync(rankConfigPath, JSON.stringify(rankConfig, null, 2));
                return api.sendMessage(`‚úÖ ƒê√£ ${action === 'on' ? 'b·∫≠t' : 't·∫Øt'} th√¥ng b√°o rankup!`, threadID);
            } else if (type === 'admin' || type === 'avatar' || type === 'name' || type === 'nick') {
                let settings = loadConfig(threadSettingsPath);
                if (!settings[threadID]) settings[threadID] = {};
                
                if (!['on', 'off'].includes(action)) {
                    const status = settings[threadID][`notify_${type}`] !== false ? 'B·∫¨T' : 'T·∫ÆT';
                    return api.sendMessage(
                        `Th√¥ng b√°o ${features[type].desc} ƒëang ${status} trong nh√≥m n√†y\n` +
                        `S·ª≠ d·ª•ng: ${features[type].usage}`, 
                        threadID
                    );
                }

                settings[threadID][`notify_${type}`] = (action === 'on');
                fs.writeFileSync(threadSettingsPath, JSON.stringify(settings, null, 2));
                
                return api.sendMessage(
                    `‚úÖ ƒê√£ ${action === 'on' ? 'b·∫≠t' : 't·∫Øt'} th√¥ng b√°o ${features[type].desc}!`,
                    threadID
                );
            } else {
                return api.sendMessage("‚ùå L·ªánh kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng: notify ƒë·ªÉ xem h∆∞·ªõng d·∫´n", threadID);
            }
        } catch (error) {
            console.error("Notify command error:", error);
            return api.sendMessage("‚ùå ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh.", threadID);
        }
    }
};
